# import pandas as pd
import calendar
import csv
import time
from threading import Thread

# from pynput.keyboard import Key, Listener
import keyboard
import matplotlib.pyplot as plt
import numpy as np
import serial
from matplotlib.animation import FuncAnimation

current_GMT = time.gmtime()

time_stamp = calendar.timegm(current_GMT)

# **********************Global variables begin***************************#
# **********************USER DEFINED VALUES BEGIN******************#
x_lim = 4  # number bar on the x axis
y_lim = 15  # number of bar on the y axis
z_lim = 50
 #limit of z axis from z_lim to -z_lim
#Channels = x_lim*y_lim # number of channels
Channels = 64
stress_channels = 14
shear_channels = 4

x_space_ratio = 1
y_space_ratio = y_lim / x_lim
z_space_ratio = 1.5

bar_size_x = 0.5
bar_size_y = 0.5

offset_z = 300
offset_colour = offset_z - 300

# **********************USER DEFINED VALUES END******************#

# value that are going to change
dx = []  # 3d x value. does not change in our case
dy = []  # 3d y value. does not change in our case
current_dz = []
num = 0
dz = np.zeros(Channels)  # 3d z value. change relative to capacitance
stress_vals = np.zeros(stress_channels)
current_dz = np.zeros(Channels)
shear_vals_1 = np.zeros(shear_channels)
shear_vals_2 = np.zeros(shear_channels)
data = []
word = []
xedges = []  # the x location of each bar, generaged by x_lim
yedges = []  # the y location of each bar, generated by y_lim

y1 = 0
y2 = 0

input_val = []
total = []
average = []

file_name = "data"+str(time_stamp)+".csv"
#file_name2 = "data"+str(time_stamp)+"2.csv"

# **********************Global variables end***************************#


def serial_port_init():     # Serial port initializationst
    ser = serial.Serial(
    port='/dev/tty.usbmodem1201',
    baudrate=500000,
    timeout = None,
    parity=serial.PARITY_NONE,
    stopbits=serial.STOPBITS_ONE,
    bytesize=serial.EIGHTBITS
    )
    ser.isOpen()
    return ser

# def on_press(key):
#     print('{0} pressed'.format(
#         key))

# def on_release(key):
#     print('{0} release'.format(
#         key))
#     if key == Key.esc:
#         # Stop listener
#         return False

# Collect events until released

'''
def thread2():
    while True:
        try:
            data_set = []
            if keyboard.is_pressed(' '):
                print("press")
                data_set = ['1']

            else:
                data_set = ['0']

            data_set.insert(0,time.time())
            with open(file_name2, 'a', newline='') as csvfile:
                writer = csv.writer(csvfile, quoting=csv.QUOTE_ALL,delimiter=',')
                writer.writerow(data_set)

        except:
            continue
'''

def thread1():
    global word, current_dz, U, y1, y2# some how python want global variable to be defined in function
    while True: # this will not block other functions since it is on a different thread
        line = ser.readline()
        raw_count = []
        try:
            data = line.decode()
            word = data.split(",")
            index = 0
            if len(word) >= Channels + 1: # discard faulty data
                for index in range(Channels):
                    try:
                        dz[index] = float(word[index])#- offset_z
                        raw_count.append(float(word[index]))
                    except ValueError:
                        pass
                    finally: 
                        pass
        except UnicodeDecodeError:
            pass
        finally:
            pass
        
        data_set = []
        data_set = raw_count
        data_set.insert(0,time.time())
        try:

            if keyboard.is_pressed(' '):
                print("press")
                data_set.insert(66,'1')

            else:
                data_set.insert(66,'0')

            with open(file_name, 'a', newline='') as csvfile:
                writer = csv.writer(csvfile, quoting=csv.QUOTE_ALL,delimiter=',')
                writer.writerow(data_set)

        except:
            continue

        
        #data_set.insert(0,time.time())
        '''
        with open(file_name, 'a', newline='') as csvfile:
            writer = csv.writer(csvfile, quoting=csv.QUOTE_ALL,delimiter=',')
            writer.writerow(data_set)

        '''

     
def animate1(num):
    #plt.cla()
    sum_average = np.zeros(16)
    sum_word = np.zeros(16)
    V_val = np.zeros(16)
    U_val = np.zeros(16)

    #U V array calculation here
    for taxel in range(0, 16):
        c1_new = dz[4*taxel] + dz[4*taxel+1]
        c3_new = dz[4*taxel+2] + dz[4*taxel+3]
        c1_avg = average[4*taxel] + average[4*taxel+1]
        c3_avg = average[4*taxel+2] + average[4*taxel+3]
        U_val[taxel] =  (c3_avg*c1_new - c1_avg*c3_new)/(c3_new+c1_new)*-1

        c2_new = dz[4*taxel] + dz[4*taxel+2]
        c4_new = dz[4*taxel+1] + dz[4*taxel+3]
        c2_avg = average[4*taxel] + average[4*taxel+2]
        c4_avg = average[4*taxel+1] + average[4*taxel+3]
        V_val[taxel] = (c4_avg*c2_new - c2_avg*c4_new)/(c4_new+c2_new)


    V = np.array(U_val[0:16])
    U = np.array(V_val[0:16])
  
    

    Q.set_UVC(U, V)
    


if __name__ == "__main__":
    #***********************Code start here**********************************#
    # Initialize serial port
    ser = serial_port_init()
    #Initialize settings for plotting

    a = -450*np.ones(4)
    b = -150*np.ones(4)
    c = 150*np.ones(4)
    d = 450*np.ones(4)

    e = np.concatenate((a,b,c,d))

    e1 = np.linspace(450,-450,num = 4)
    e1 = np.concatenate((e1,e1,e1,e1))

    X = np.array(np.reshape(e, 16))
    Y = np.array(np.reshape(e1, 16))
    U = np.array(np.zeros(16))
    V = np.array(np.zeros(16))

    #plt.ion()
    fig, ax = plt.subplots(1, 1)
    #fig.suptitle("Pressure")

    Q = ax.quiver(X, Y, U, V, units = 'xy', scale = 1, color = "red", width = 5)
    ax.set_xlim(-800, 800)
    ax.set_ylim(-800, 800)

    # define values for calculating average at the beginning
    index = 0
    i = 0
    count = 0
    input_val = np.zeros((100, Channels))
    average = np.zeros(Channels)

    while index < 100:
        line = ser.readline()
        data = line.decode()
        word = data.split(",")
        len_word = len(word)
        count = count + 1
        if(len_word >= Channels): # check value
            for i in range(Channels):
                try:
                    input_val[index][i] = float(word[i])
                except:
                    continue
            index = index + 1


    for i in range(Channels):
        total = 0
        for index in range(100):
            total = input_val[index][i] + total
            average_val = total / 100
            average [i] = average_val

    print("done")

    start = time.time()

    '''
    with open(file_name, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile, quoting=csv.QUOTE_ALL,delimiter=',')
    

    with open(file_name2, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile, quoting=csv.QUOTE_ALL,delimiter=',')
        writer.writerow("Keyboard")
    '''

    # with Listener(on_press=on_press, on_release=on_release) as listener:
    #     listener.start()

    thread = Thread(target = thread1)
    thread.start()

    #keyboard_thread = Thread(target= thread2)
    #keyboard_thread.start()
    

    ani1 = FuncAnimation(plt.gcf(), animate1,interval=100, blit = False)
    #ani2 = FuncAnimation(plt.gcf(), animate2,interval=100, blit = False)
    plt.show()